name: "Security Analysis Template"

on:
  workflow_call:
    inputs:
      solution:
        required: true
        type: string
      sonar_project_key:
        required: true
        type: string
      sonar_org:
        required: true
        type: string
    secrets:
      SONAR_TOKEN:
        required: true
      MS_TEAMS_WEBHOOK:
        required: false

permissions:
  actions: read
  contents: read
  security-events: write

# üîÑ Evita an√°lisis simult√°neos del mismo repositorio
concurrency:
  group: analyze-security-${{ github.ref }}
  cancel-in-progress: true

jobs:
  security-scan:
    name: üõ°Ô∏è An√°lisis de Seguridad (CodeQL + SonarCloud)
    runs-on: ubuntu-latest

    env:
      SOLUTION_PATH: ${{ inputs.solution }}
      SONAR_PROJECT_KEY: ${{ inputs.sonar_project_key }}
      SONAR_ORG: ${{ inputs.sonar_org }}
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      SHOULD_RUN_SONAR: ${{ github.actor != 'dependabot[bot]' }}

    outputs:
      analysis_status: ${{ steps.status.outputs.status }}

    steps:
      - name: üß∞ Checkout del c√≥digo
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: ‚öôÔ∏è Configurar .NET 8
        uses: actions/setup-dotnet@v5
        with:
          dotnet-version: '8.0.x'

      # -----------------------
      # üîç CodeQL
      # -----------------------
      - name: üß™ Inicializar CodeQL
        uses: github/codeql-action/init@v4
        with:
          languages: csharp
          build-mode: manual
          queries: security-and-quality

      - name: üèóÔ∏è Compilar proyecto
        run: |
          echo "üîç Restaurando dependencias para $SOLUTION_PATH"
          dotnet restore "$SOLUTION_PATH"
          echo "üèóÔ∏è Compilando proyecto $SOLUTION_PATH en modo Release"
          dotnet build "$SOLUTION_PATH" --configuration Release --no-restore

      - name: üîé Ejecutar an√°lisis CodeQL
        uses: github/codeql-action/analyze@v4

      # -----------------------
      # üß≠ SonarCloud
      # -----------------------
      - name: üß© Instalar SonarScanner
        if: env.SHOULD_RUN_SONAR == 'true'
        run: |
          dotnet tool update --global dotnet-sonarscanner || dotnet tool install --global dotnet-sonarscanner
          echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

      - name: üöÄ Iniciar an√°lisis SonarCloud
        if: env.SHOULD_RUN_SONAR == 'true'
        run: |
          echo "üöÄ Iniciando an√°lisis SonarCloud..."
          dotnet sonarscanner begin \
            /k:"$SONAR_PROJECT_KEY" \
            /o:"$SONAR_ORG" \
            /d:sonar.host.url="https://sonarcloud.io" \
            /d:sonar.login="$SONAR_TOKEN" \
            /d:sonar.analysis.key="${{ github.run_id }}" \
            /d:sonar.analysis.name="Security-${{ github.run_number }}" \
            /d:sonar.exclusions="**/bin/**,**/obj/**,**/Migrations/**"

      - name: üèóÔ∏è Build para Sonar
        if: env.SHOULD_RUN_SONAR == 'true'
        run: dotnet build "$SOLUTION_PATH" --configuration Release --no-restore

      - name: üß™ Tests con cobertura
        if: env.SHOULD_RUN_SONAR == 'true'
        run: |
          dotnet test ./Scharff.UnitTest/Scharff.UnitTest.csproj \
            --configuration Release \
            --no-build \
            --collect:"XPlat Code Coverage" \
            --results-directory ./TestResults

      - name: üèÅ Finalizar an√°lisis SonarCloud
        if: env.SHOULD_RUN_SONAR == 'true'
        id: sonar-finish
        run: |
          dotnet sonarscanner end /d:sonar.login="$SONAR_TOKEN"
          echo "‚úÖ An√°lisis SonarCloud finalizado correctamente."

      # -----------------------
      # üìä Estado final
      # -----------------------
      - name: üìà Registrar estado del an√°lisis
        id: status
        run: |
          STATUS="${{ job.status }}"
          echo "status=$STATUS" >> $GITHUB_OUTPUT
          echo "üìä Estado del an√°lisis: $STATUS"

      # =====================================================
      # üì® Notificaci√≥n a Microsoft Teams (productiva con curl)
      # =====================================================
      - name: üì£ Notificar resultado en Microsoft Teams
        if: always()
        env:
          TEAMS_WEBHOOK: ${{ secrets.MS_TEAMS_WEBHOOK }}
        run: |
          if [ -z "$TEAMS_WEBHOOK" ]; then
            echo "‚ö†Ô∏è MS_TEAMS_WEBHOOK no est√° configurado. Saltando notificaci√≥n."
            exit 0
          fi

          STATUS="${{ job.status }}"
          COLOR="#36a64f"; EMOJI="üü¢"
          if [ "$STATUS" != "success" ]; then COLOR="#FF0000"; EMOJI="üî¥"; fi

          MESSAGE="{
            \"@type\": \"MessageCard\",
            \"@context\": \"http://schema.org/extensions\",
            \"themeColor\": \"$COLOR\",
            \"summary\": \"Security Analysis $STATUS\",
            \"sections\": [{
              \"activityTitle\": \"$EMOJI **Security Analysis - $STATUS**\",
              \"activitySubtitle\": \"**Branch:** ${{ github.ref_name }}<br>**Actor:** ${{ github.actor }}\",
              \"text\": \"**CodeQL y SonarCloud ejecutados.**<br>Estado: **$STATUS**<br>[Ver ejecuci√≥n en GitHub Actions](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\"
            }]
          }"

          curl -H "Content-Type: application/json" \
               -d "$MESSAGE" \
               "$TEAMS_WEBHOOK"
