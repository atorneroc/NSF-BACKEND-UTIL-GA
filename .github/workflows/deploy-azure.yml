name: "Azure Deploy Template"

on:
  workflow_call:
    inputs:
      app_name:
        required: true
        type: string
      slot:
        default: 'production'
        type: string
    secrets:
      AZURE_CLIENT_ID:
        required: true
      AZURE_TENANT_ID:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true
      MS_TEAMS_WEBHOOK:
        required: false

permissions:
  id-token: write
  contents: read

# üîÑ Evita despliegues simult√°neos
concurrency:
  group: deploy-${{ inputs.app_name }}-${{ inputs.slot }}
  cancel-in-progress: true

jobs:
  deploy:
    name: üöÄ Deploy Azure App Service (ZIP)
    runs-on: ubuntu-latest
    environment:
      name: production

    env:
      APP_NAME: ${{ inputs.app_name }}
      SLOT_NAME: ${{ inputs.slot }}
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      RESOURCE_GROUP: scharff-nsf-dev-rg

    outputs:
      deployment_status: ${{ steps.status.outputs.state }}

    steps:
      - name: üß∞ Descargar artefacto del build
        uses: actions/download-artifact@v6
        with:
          name: backend-artifact
          path: ./publish

      - name: ‚úÖ Validar artefacto
        run: |
          if [ ! -d "./publish" ]; then
            echo "‚ùå No se encontr√≥ el artefacto de publicaci√≥n."
            exit 1
          fi
          echo "üì¶ Artefacto detectado correctamente."

      - name: üîê Login Azure (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}
          enable-oidc: true

      - name: üöÄ Deploy a Azure App Service
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.APP_NAME }}
          slot-name: ${{ env.SLOT_NAME }}
          package: ./publish
          runtime-stack: 'DOTNETCORE|8.0'
          startup-command: 'dotnet Scharff.API.Utils.dll'

      - name: üîç Verificar estado del despliegue
        id: status
        run: |
          echo "üîé Consultando estado del App Service..."
          STATE=$(az webapp show --name $APP_NAME --resource-group $RESOURCE_GROUP --query "state" -o tsv)
          echo "state=$STATE" >> $GITHUB_OUTPUT
          echo "‚úÖ Estado actual: $STATE"

      # =====================================================
      # üì® Notificaci√≥n a Microsoft Teams (productiva con curl)
      # =====================================================
      - name: üì£ Notificar resultado en Microsoft Teams
        if: always()
        env:
          TEAMS_WEBHOOK: ${{ secrets.MS_TEAMS_WEBHOOK }}
        run: |
          if [ -z "$TEAMS_WEBHOOK" ]; then
            echo "‚ö†Ô∏è MS_TEAMS_WEBHOOK no est√° configurado. Saltando notificaci√≥n."
            exit 0
          fi

          STATUS="${{ job.status }}"
          COLOR="#36a64f"; EMOJI="üü¢"
          if [ "$STATUS" != "success" ]; then COLOR="#FF0000"; EMOJI="üî¥"; fi

          MESSAGE="{
            \"@type\": \"MessageCard\",
            \"@context\": \"http://schema.org/extensions\",
            \"themeColor\": \"$COLOR\",
            \"summary\": \"Deploy $STATUS\",
            \"sections\": [{
              \"activityTitle\": \"$EMOJI **Azure Deploy - $STATUS**\",
              \"activitySubtitle\": \"**App:** ${{ inputs.app_name }}<br>**Branch:** ${{ github.ref_name }}<br>**Actor:** ${{ github.actor }}\",
              \"text\": \"Despliegue: **${{ inputs.app_name }}**<br>Estado: **${{ steps.status.outputs.state }}**<br>[Ver ejecuci√≥n en GitHub Actions](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\"
            }]
          }"
          
          curl -H "Content-Type: application/json" \
                -d "$MESSAGE" \
                "$TEAMS_WEBHOOK"
