name: "🐳 Build, Scan & Push Docker Image to ACR"

on:
  workflow_call:
    secrets:
      AZURE_CLIENT_ID:
        required: true
      AZURE_TENANT_ID:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true
    outputs:
      tag:
        description: "Tag generado para la imagen Docker"
        value: ${{ jobs.build-scan-push.outputs.image_tag }}

permissions:
  id-token: write
  contents: read

env:
  ACR_NAME: nsfacrdev              # 👈 tu ACR real
  IMAGE_NAME: nsf-backend-util     # 👈 nombre de tu imagen
  TAG: ${{ github.run_number }}    # 👈 tag dinámico
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

jobs:
  build-scan-push:
    name: 🏗️ Build + Scan + Push ACR
    runs-on: ubuntu-latest

    # 👇 exportamos el TAG para que lo use el workflow principal
    outputs:
      image_tag: ${{ env.TAG }}

    steps:
      - name: 🧰 Checkout del código
        uses: actions/checkout@v5

      - name: ⚙️ Configurar Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435

      - name: 🔐 Login a Azure (OIDC)
        uses: azure/login@a457da9ea143d694b1b9c7c869ebb04ebe844ef5  
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}
          enable-oidc: true

      - name: 🔐 Login al ACR
        run: az acr login --name $ACR_NAME

      - name: 🏗️ Build de la imagen Docker
        run: |
          echo "🏷️ Tag actual: $TAG"
          docker build -t $ACR_NAME.azurecr.io/$IMAGE_NAME:$TAG .

      - name: 🧪 Escaneo de vulnerabilidades con Trivy (bloqueante)
        uses: aquasecurity/trivy-action@b6643a29fecd7f34b3597bc6acb0a98b03d33ff8
        with:
          image-ref: ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ env.TAG }}
          format: 'table'
          vuln-type: 'os,library'
          severity: 'HIGH,CRITICAL'
          exit-code: '1'             # ❌ falla si hay HIGH o CRITICAL
          ignore-unfixed: true
          output: 'trivy-report.txt'

      - name: 📊 Subir reporte Trivy como artefacto
        if: always()                 # 📁 se sube aunque falle
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report.txt

      - name: 🚀 Push de la imagen al ACR
        if: success()
        run: docker push $ACR_NAME.azurecr.io/$IMAGE_NAME:$TAG
