name: SonarCloud (.NET)

on:
  push:
    branches: [ "main", "dev", "staging" ]
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build-and-scan:
    name: Build, Test and SonarCloud Scan
    runs-on: ubuntu-latest

    env:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: üß∞ Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # ‚úÖ necesario para an√°lisis completo y PRs

      - name: ‚öôÔ∏è Setup .NET 8
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: üì¶ Restore NuGet packages
        run: dotnet restore nsf-backend-util.sln

      - name: üß© Install SonarScanner for .NET
        run: dotnet tool install --global dotnet-sonarscanner
      - name: üõ†Ô∏è Add dotnet tools to PATH
        run: echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

      - name: üîç Begin SonarCloud Analysis
        run: |
          dotnet sonarscanner begin \
            /k:"atorneroc_NSF-BACKEND-UTIL-GA" \
            /o:"atorneroc" \
            /d:sonar.login="${SONAR_TOKEN}" \
            /d:sonar.host.url="https://sonarcloud.io" \
            /d:sonar.cs.opencover.reportsPaths="**/coverage.opencover.xml" \
            /d:sonar.coverage.exclusions="**/bin/**/*,**/obj/**/*,**/*.Test.cs,**/Migrations/**/*"
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: üèóÔ∏è Build solution
        run: dotnet build nsf-backend-util.sln --configuration Release --no-restore

      - name: üß™ Ejecutar pruebas unitarias y recolectar cobertura
        run: |
          dotnet test ./Scharff.UnitTest/Scharff.UnitTest.csproj \
            --no-build \
            --configuration Release \
            --logger:"trx;LogFileName=test_results.trx" \
            --collect:"XPlat Code Coverage" \
            -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover


      - name: üöÄ End SonarCloud Analysis
        run: dotnet sonarscanner end /d:sonar.login="${SONAR_TOKEN}"
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
