name: SonarCloud (.NET 8)

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  actions: read

jobs:
  sonarcloud:
    name: 🔍 Análisis de SonarCloud
    runs-on: ubuntu-latest

    env:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      # 🧰 1. Checkout del código fuente
      - name: 🧰 Checkout del código
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # necesario para el análisis de PRs y cobertura diferencial

      # ⚙️ 2. Configurar .NET 8
      - name: ⚙️ Configurar .NET 8
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      # 💾 3. Restaurar dependencias
      - name: 📦 Restaurar dependencias
        run: dotnet restore nsf-backend-util.sln

      # 🧩 4. Instalar SonarScanner para .NET
      - name: 🧩 Instalar dotnet-sonarscanner
        run: dotnet tool install --global dotnet-sonarscanner

      - name: 🛠️ Agregar herramientas .NET al PATH
        run: echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

      - name: 🔧 Posicionar en la raíz del proyecto
        run: cd $GITHUB_WORKSPACE

      # 🚀 5. Iniciar análisis SonarCloud
      - name: 🔍 Begin SonarCloud Analysis
        run: |
          dotnet sonarscanner begin \
            /k:"atorneroc_NSF-BACKEND-UTIL-GA" \
            /o:"atorneroc" \
            /d:sonar.host.url="https://sonarcloud.io" \
            /d:sonar.login="${SONAR_TOKEN}" \
            /d:sonar.sources="." \
            /d:sonar.exclusions="**/bin/**/*,**/obj/**/*,**/*.Test.cs,**/Migrations/**/*" \
            /d:sonar.cs.opencover.reportsPaths="**/coverage.opencover.xml" \
            /d:sonar.coverage.exclusions="**/bin/**/*,**/obj/**/*,**/Migrations/**/*" \
            /d:sonar.verbose=true

      # 🏗️ 6. Compilar proyecto principal (Release)
      - name: 🏗️ Compilar proyecto
        run: dotnet build nsf-backend-util.sln --configuration Release --no-restore

      # 🧪 7. Ejecutar pruebas unitarias con cobertura
      - name: 🧪 Ejecutar pruebas con cobertura
        run: |
          dotnet test ./Scharff.UnitTest/Scharff.UnitTest.csproj \
            --no-build \
            --configuration Release \
            --logger:"trx;LogFileName=test_results.trx" \
            --collect:"XPlat Code Coverage" \
            -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover

      # 🏁 8. Finalizar análisis SonarCloud
      - name: 🏁 End SonarCloud Analysis
        run: dotnet sonarscanner end /d:sonar.login="${SONAR_TOKEN}"
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      # 📊 9. Publicar resultados de pruebas
      - name: 📊 Publicar resultados de pruebas
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: '**/test_results.trx'
