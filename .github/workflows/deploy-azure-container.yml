name: "Azure Deploy Container Template"

on:
  workflow_call:
    inputs:
      app_name:
        required: true
        type: string
      acr_name:
        required: true
        type: string
      image_name:
        required: true
        type: string
      image_tag:
        default: "latest"   # 👈 se reemplaza dinámicamente desde el workflow principal
        type: string
      slot:
        default: "production"
        type: string
    secrets:
      AZURE_CLIENT_ID:
        required: true
      AZURE_TENANT_ID:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true

permissions:
  id-token: write
  contents: read

jobs:
  deploy-container:
    runs-on: ubuntu-latest
    name: 🚀 Deploy Container to Azure

    env:
      APP_NAME: ${{ inputs.app_name }}
      SLOT_NAME: ${{ inputs.slot }}
      ACR_NAME: ${{ inputs.acr_name }}
      IMAGE_NAME: ${{ inputs.image_name }}
      IMAGE_TAG: ${{ inputs.image_tag }}
      RESOURCE_GROUP: scharff-nsf-dev-rg  # 👈 mejor definirlo como variable (fácil de reutilizar)

    steps:
      - name: 🔐 Login Azure (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-oidc: true

      - name: 🔐 Login a ACR
        run: az acr login --name $ACR_NAME

      - name: 🔁 Actualizar App Service con nueva imagen
        run: |
          echo "🔁 Actualizando imagen en $APP_NAME con tag: $IMAGE_TAG"
          az webapp config container set \
            --name $APP_NAME \
            --resource-group $RESOURCE_GROUP \
            --slot $SLOT_NAME \
            --container-image-name "$ACR_NAME.azurecr.io/$IMAGE_NAME:$IMAGE_TAG" \
            --container-registry-url "https://$ACR_NAME.azurecr.io"
      
      - name: 🔍 Verificar configuración del contenedor
        run: |
          echo "🔍 Configuración actual de contenedor:"
          az webapp config show \
            --name $APP_NAME \
            --resource-group $RESOURCE_GROUP \
            --slot $SLOT_NAME \
            --query "linuxFxVersion"

      - name: 🔄 Reiniciar App Service
        run: |
          echo "🔄 Reiniciando $APP_NAME..."
          az webapp restart --name $APP_NAME --resource-group $RESOURCE_GROUP --slot $SLOT_NAME

      - name: ✅ Validar despliegue
        run: |
          echo "✅ Estado actual:"
          az webapp show \
            --name $APP_NAME \
            --resource-group $RESOURCE_GROUP \
            --slot $SLOT_NAME \
            --query "state" -o tsv
