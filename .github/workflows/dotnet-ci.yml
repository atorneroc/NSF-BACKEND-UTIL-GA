name: ".NET CI Template"

on:
  workflow_call:
    secrets:
      MS_TEAMS_WEBHOOK:
        required: true
    inputs:
      solution:
        required: true
        type: string
      test_project:
        required: true
        type: string
    outputs:
      artifact_name:
        description: "Nombre del artefacto publicado"
        value: backend-artifact
     # nuevo: salida de versión
      version:
        description: "Versión generada automáticamente"
        value: ${{ jobs.build.outputs.version }}

permissions:
  contents: read
  actions: read

# 🔄 Evita ejecuciones paralelas en la misma rama
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        dotnet: [ '8.0.x' ]  # puedes agregar '9.0-preview' más adelante

    outputs:
      version: ${{ steps.version.outputs.version }}

    env:
      SOLUTION_PATH: ${{ inputs.solution }}
      TEST_PROJECT_PATH: ${{ inputs.test_project }}

    steps:
      - name: 🧰 Checkout del código
        uses: actions/checkout@v5

      - name: ⚙️ Configurar .NET ${{ matrix.dotnet }}
        uses: actions/setup-dotnet@v5
        with:
          dotnet-version: ${{ matrix.dotnet }}

      - name: 💾 Cache de dependencias NuGet
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: 🏷️ Generar versión
        id: version
        run: |
          VERSION="1.0.${{ github.run_number }}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "🔖 Versión generada: $VERSION"

      - name: 📦 Restaurar dependencias
        run: dotnet restore "$SOLUTION_PATH"

      - name: 🏗️ Compilar solución
        run: dotnet build "$SOLUTION_PATH" --configuration Release --no-restore

      - name: 🧪 Ejecutar pruebas unitarias
        run: |
          dotnet test "$TEST_PROJECT_PATH" \
            --configuration Release \
            --no-build \
            --logger:"trx;LogFileName=test_results.trx" \
            --collect:"XPlat Code Coverage" \
            --results-directory ./TestResults

      - name: 📊 Subir resultados de prueba
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: ./TestResults

      - name: 📦 Publicar artefactos compilados
        run: dotnet publish "$SOLUTION_PATH" -c Release -o ./publish

      - name: 📤 Subir artefacto de build
        uses: actions/upload-artifact@v4
        with:
          name: backend-artifact
          path: ./publish
          retention-days: 5

      # ===========================================
      # 📨 Notificación a Teams (versión productiva)
      # ===========================================
      - name: 📣 Notificar resultado en Microsoft Teams
        if: always()
        run: |
          STATUS="${{ job.status }}"
          COLOR="#36a64f"
          EMOJI="🟢"
          if [ "$STATUS" != "success" ]; then
            COLOR="#FF0000"
            EMOJI="🔴"
          fi

          MESSAGE="{
            \"@type\": \"MessageCard\",
            \"@context\": \"http://schema.org/extensions\",
            \"themeColor\": \"$COLOR\",
            \"summary\": \"Pipeline $STATUS\",
            \"sections\": [{
              \"activityTitle\": \"$EMOJI **.NET CI - Resultado: $STATUS**\",
              \"activitySubtitle\": \"**Workflow:** ${{ github.workflow }}<br>**Branch:** ${{ github.ref_name }}<br>**Actor:** ${{ github.actor }}\",
              \"text\": \"Versión: **${{ steps.version.outputs.version }}**<br>[Ver ejecución en GitHub Actions](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\"
            }]
          }"

          echo "📨 Enviando mensaje a Microsoft Teams..."
          curl -H "Content-Type: application/json" \
               -d "$MESSAGE" \
               ${{ secrets.MS_TEAMS_WEBHOOK }}
